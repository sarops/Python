import turtle, time, random

# turtle screen
screen = turtle.Screen()
screen.title("Drone Monitoring Maritime Traffic")
screen.bgcolor("lightblue")
screen.setup(width=800, height=600)

# main ship
ship = turtle.Turtle()
ship.shape("square")
ship.color("blue")
ship.penup()
ship.goto(0, 0)  # ship starts at the origin

# drone
drone = turtle.Turtle()
drone.shape("triangle")
drone.color("red")
drone.penup()
drone.goto(ship.position())  # the drone starts at the ship's position

# maritime traffic positions (other ships)
traffic_positions = [
    (-200, 150), 
    (150, -100), 
    (100, 50), 
    (-150, -50)
]

# create nearby ships
def create_nearby_ships():
    for pos in traffic_positions:
        nearby_ship = turtle.Turtle()
        nearby_ship.shape("circle")  # other ships as circles
        nearby_ship.color("green")
        nearby_ship.penup()
        nearby_ship.goto(pos)  # position the nearby ship
        nearby_ship.stamp()     # stamp the shape to make it visible

# function to simulate maritime traffic data based on distance
def gather_maritime_traffic_data(distance):
    # simulate traffic flow and congestion based on distance
    if distance < 50:
        flow = random.randint(200, 400)  # high flow if close
        congestion = random.randint(7, 10)  # high congestion if close
    elif distance < 100:
        flow = random.randint(100, 200)  # moderate flow if medium distance
        congestion = random.randint(4, 6)  # moderate congestion if medium distance
    else:
        flow = random.randint(20, 100)   # low flow if far away
        congestion = random.randint(1, 3)  # low congestion if far away
    
    return flow, congestion

# display traffic data
def display_traffic_data(flow, congestion):
    turtle.clear()  # clear previous messages
    turtle.penup()
    turtle.hideturtle()
    turtle.goto(-350, 250)  # position for displaying text
    turtle.write(f"Traffic Flow: {flow} vessels/hour", font=("Arial", 16, "normal"))
    turtle.goto(-350, 220)
    turtle.write(f"Congestion Level: {congestion}/10", font=("Arial", 16, "normal"))
    turtle.goto(-350, 190)
    turtle.write("Monitoring Maritime Traffic...", font=("Arial", 16, "normal"))

# move the drone to each traffic position and then return to the ship
def move_drone_to_traffic():
    for pos in traffic_positions:
        drone.goto(pos)  # move the drone to traffic position(s)
        time.sleep(1)  # wait for a second to visualize the monitoring
        
        # distance from the drone to the traffic position
        distance = drone.distance(pos)
        
        # gathering maritime traffic data based on distance
        flow, congestion = gather_maritime_traffic_data(distance)
        
        # simulated traffic data display
        display_traffic_data(flow, congestion)
        time.sleep(2)  # Wait a bit longer to read the data

    # after monitoring all positions, return to the ship's position
    drone.goto(ship.position())
    time.sleep(1)  # wait for a second before ending

# create nearby ships
create_nearby_ships()

# start the animation
move_drone_to_traffic()

# close the window on click
screen.exitonclick()
